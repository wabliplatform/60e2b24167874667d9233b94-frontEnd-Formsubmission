/**
 * TempApi
 * This is a sample openApi document
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: lampralexandros@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Quest from '../model/Quest';

/**
* Quest service.
* @module api/QuestApi
* @version 1.0.0
*/
export default class QuestApi {

    /**
    * Constructs a new QuestApi. 
    * @alias module:api/QuestApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createquest operation.
     * @callback module:api/QuestApi~createquestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Quest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates the data
     * @param {module:model/Quest} quest data to be created
     * @param {module:api/QuestApi~createquestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Quest}
     */
    createquest(quest, callback) {
      let postBody = quest;
      // verify the required parameter 'quest' is set
      if (quest === undefined || quest === null) {
        throw new Error("Missing the required parameter 'quest' when calling createquest");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Quest;
      return this.apiClient.callApi(
        '/quest', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletequest operation.
     * @callback module:api/QuestApi~deletequestCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the element
     * @param {String} questId the Id parameter
     * @param {module:api/QuestApi~deletequestCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletequest(questId, callback) {
      let postBody = null;
      // verify the required parameter 'questId' is set
      if (questId === undefined || questId === null) {
        throw new Error("Missing the required parameter 'questId' when calling deletequest");
      }

      let pathParams = {
        'questId': questId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/quest/{questId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllquest operation.
     * @callback module:api/QuestApi~getAllquestCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Quest>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the data
     * @param {module:api/QuestApi~getAllquestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Quest>}
     */
    getAllquest(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Quest];
      return this.apiClient.callApi(
        '/quest/getAll', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getByParamsquest operation.
     * @callback module:api/QuestApi~getByParamsquestCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Quest>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the data based on user query
     * @param {String} filter the query based on which the search is performed
     * @param {module:api/QuestApi~getByParamsquestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Quest>}
     */
    getByParamsquest(filter, callback) {
      let postBody = null;
      // verify the required parameter 'filter' is set
      if (filter === undefined || filter === null) {
        throw new Error("Missing the required parameter 'filter' when calling getByParamsquest");
      }

      let pathParams = {
      };
      let queryParams = {
        'filter': filter
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Quest];
      return this.apiClient.callApi(
        '/quest/getByParams', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getquest operation.
     * @callback module:api/QuestApi~getquestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Quest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the element
     * @param {String} questId the Id parameter
     * @param {module:api/QuestApi~getquestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Quest}
     */
    getquest(questId, callback) {
      let postBody = null;
      // verify the required parameter 'questId' is set
      if (questId === undefined || questId === null) {
        throw new Error("Missing the required parameter 'questId' when calling getquest");
      }

      let pathParams = {
        'questId': questId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Quest;
      return this.apiClient.callApi(
        '/quest/{questId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatequest operation.
     * @callback module:api/QuestApi~updatequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Quest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the element
     * @param {String} questId the Id parameter
     * @param {Object} opts Optional parameters
     * @param {module:model/Quest} opts.quest data to be updated
     * @param {module:api/QuestApi~updatequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Quest}
     */
    updatequest(questId, opts, callback) {
      opts = opts || {};
      let postBody = opts['quest'];
      // verify the required parameter 'questId' is set
      if (questId === undefined || questId === null) {
        throw new Error("Missing the required parameter 'questId' when calling updatequest");
      }

      let pathParams = {
        'questId': questId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Quest;
      return this.apiClient.callApi(
        '/quest/{questId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
